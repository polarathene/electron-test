# Only build on code commits, not when tags are added(eg upon publishing a draft release)
if: tag IS blank

# Two build jobs, one on macOS, another on Linux with Docker to build Linux + Windows binaries
matrix:
  include:
    - name: "macOS"
      os: osx
      osx_image: xcode9.4
      language: node_js
      node_js: "10"
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder

    - name: "Windows + Linux"
      os: linux
      services: docker
      language: minimal
      before_install:
        - docker pull electronuserland/builder:wine

# The following is archived and uploaded to S3 after the script phase.
# The next job will download and use that cache, so large cache sizes will delay the build.
# Cache expires 28 days after the build for open source projects.
# In most cases, each matrix job will have a separate cache.
# More details: https://docs.travis-ci.com/user/caching/
cache:
  yarn: true
  directories:
    - node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

# Clean out these locations before archiving cache to tar
before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

# Actual build command/script for the two jobs in the matrix above to use (could probably move these into each one?)
script:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      docker run --rm \
        -v ${PWD}:/project \
        -v ~/.cache/electron:/root/.cache/electron \
        -v ~/.cache/electron-builder:/root/.cache/electron-builder \
        electronuserland/builder:wine \
        /bin/bash -c "yarn --link-duplicates --pure-lockfile && yarn dist --linux --win"
    else
      yarn dist
    fi

# Workaround for bug in Travis deploy logic, `tag_name` isn't used for draft releases,
# Specify the tag to target in draft release instead for now via $TRAVIS_TAG
before_deploy:
  - export TRAVIS_TAG="preview"

# Deploy to Github Releases as draft release or update the existing one with the above `tag_name` value(any existing files will be overwritten)
# Uses a glob pattern to lookup any file in the `dist` directory with the given extensions
# If you want the build output before packaging, they are in "unpacked" directories prefixed by the OS (eg win-unpacked), linux, and maybe osx are the other two?
deploy:
  provider: releases
  api_key: $OAUTH_TOKEN
  skip_cleanup: true
  draft: true
  overwrite: true
  file_glob: true
  file:
    - dist/*.exe
    - dist/*.zip
    - dist/*.dmg
    - dist/*.deb
    - dist/*.snap
    - dist/*.AppImage
    - dist/*.tar.gz
